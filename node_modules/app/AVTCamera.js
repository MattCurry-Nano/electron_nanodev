var FFI = require('ffi');
var ref = require('ref');
var Struct = require('ref-struct');
var ArrayType = require('ref-array');

var charPtr = ref.refType(ref.types.char);
var intPtr = ref.refType(ref.types.int32);

var VmbError = ref.types.int32;
var VmbAccessMode = ref.types.int32;
var VmbAccessModePtr = ref.refType(VmbAccessMode);

var VmbCameraInfo = Struct({
  'cameraIdString': charPtr,
  'cameraName': charPtr,
  'modelName': charPtr,
  'serialString': charPtr,
  'permittedAccess': VmbAccessMode,
  'interfaceIdString': charPtr
});
var VmbCameraInfoPtr = ref.refType(VmbCameraInfo);
var VmbCameraInfoArray = ArrayType(VmbCameraInfo);

var lib = FFI.Library('../../../ThirdParty/AVT/VimbaC/Bin/Win64/VimbaC.dll',
  {
    'VmbStartup': [ VmbError, [ ] ],
    'VmbShutdown': [ 'void', [ ] ],
    'VmbCamerasList': [ VmbError, [ VmbCameraInfoArray, ref.types.int32, intPtr, ref.types.int32 ] ]
  });

module.exports = {};

function startup () {
  lib.VmbStartup();
}
module.exports.startup = startup;

function shutdown () {
  lib.VmbShutdown();
}
module.exports.shutdown = shutdown;

function get_camera_list () {
  var size = 5;
  var infos = new VmbCameraInfoArray(size);
  var p_nfound = ref.alloc(ref.types.int32);

  var error = lib.VmbCamerasList(infos, size, p_nfound, infos[0].size);
  var cameras = [];
  var nfound = p_nfound.deref();
  for (var i = 0; i<nfound; i++) {
    cameras.push_back(infos[i]);
  }

  return cameras;
}
module.exports.get_camera_list = get_camera_list;
